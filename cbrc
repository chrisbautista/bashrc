#!/bin/bash

alias gtree="git log --graph --pretty=oneline --abbrev-commit"
alias gsave="git stash save"
alias gpop="git stash pop"

function git_tree(){
        BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
        if [ ! ""${BRANCH}"" == """" ]
        then
          TREE=`git log --graph --pretty=oneline --abbrev-commit 2> /dev/null | head --lines=2`
          echo -e ""\n${TREE}\n ...""
        else
                echo """"
        fi

}

 get current branch in git repo
function parse_git_branch() {
        BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
        if [ ! ""${BRANCH}"" == """" ]
        then
                STAT=`parse_git_dirty`
                echo ""${BRANCH}${STAT}""
        else
                echo """"
        fi
}

function parse_git_dirty {

        status=`git status 2>&1 | tee`
        dirty=`echo -n ""${status}"" 2> /dev/null | grep ""modified:"" &> /dev/null; echo ""$?""`
        untracked=`echo -n ""${status}"" 2> /dev/null | grep ""Untracked files"" &> /dev/null; echo ""$?""`
        ahead=`echo -n ""${status}"" 2> /dev/null | grep ""Your branch is ahead of"" &> /dev/null; echo ""$?""`
        newfile=`echo -n ""${status}"" 2> /dev/null | grep ""new file:"" &> /dev/null; echo ""$?""`
        renamed=`echo -n ""${status}"" 2> /dev/null | grep ""renamed:"" &> /dev/null; echo ""$?""`
        deleted=`echo -n ""${status}"" 2> /dev/null | grep ""deleted:"" &> /dev/null; echo ""$?""`
        bits=''

        UPSTREAM=${1:-'@{u}'}
        LOCAL=$(git rev-parse @)
        REMOTE=$(git rev-parse ""$UPSTREAM"")
        BASE=$(git merge-base @ ""$UPSTREAM"")

        if [ $LOCAL = $REMOTE ]; then
               bits=""√${bits}""
        elif [ $LOCAL = $BASE ]; then
               bits=""δ${bits}""
        elif [ $REMOTE = $BASE ]; then
               bits=""↑${bits}""
        else
               bits=""┬${bits}""
        fi

        if [ ""${renamed}"" == ""0"" ]; then
                bits="">${bits}""
        fi
        if [ ""${ahead}"" == ""0"" ]; then
                bits=""*${bits}""
        fi
        if [ ""${newfile}"" == ""0"" ]; then
                bits=""+${bits}""
        fi
        if [ ""${untracked}"" == ""0"" ]; then
                bits=""?${bits}""
        fi
        if [ ""${deleted}"" == ""0"" ]; then
                bits=""x${bits}""
        fi
        if [ ""${dirty}"" == ""0"" ]; then
                bits=""!${bits}""
        fi
        if [ ! ""${bits}"" == """" ]; then
                echo "" ${bits}""
        else
                echo """"
        fi
}

function nonzero_return() {
        RETVAL=$?
        [ $RETVAL -ne 0 ] && echo ""Err:$RETVAL""
}

export PS1=""\[\e[44m\]\d\[\e[m\]\[\e[44m\] \@ \[\e[34;42m\]◤ \[\e[m\]\[\e[m\]\[\e[42m\] \`nonzero_return\` \[\e[m\]\[\e[32;47m\]◤\[\e[m\]\[\e[30;47m\] \u \[\e[37;43m\]◤\[\e[m\]\[\e[30;43m\] \w\[\e[m\]\[\e[33;41m\]◤ \[\e[m\]\[\e[m\]\[\e[41m\] \`parse_git_branch\` \[\e[m\]\[\e[31;40m\]◤\[\e[m\]\`git_tree\`\n\$ ""
